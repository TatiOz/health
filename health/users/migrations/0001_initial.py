# Generated by Django 4.2.1 on 2024-07-05 21:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        default=None,
                        null=True,
                        upload_to="users/%Y/%m/%d",
                        verbose_name="Фото профиля",
                    ),
                ),
                (
                    "date_birth",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Дата рождения"
                    ),
                ),
                (
                    "chronic_diseases",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Хронические болезни"
                    ),
                ),
                (
                    "height",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Рост"
                    ),
                ),
                (
                    "weight",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Вес"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="FormPersonComplains",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "complaints",
                    models.TextField(
                        blank=True, max_length=1000, verbose_name="Жалобы"
                    ),
                ),
                (
                    "medical_history",
                    models.TextField(blank=True, null=True, verbose_name="Анамнез"),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True,
                        editable=False,
                        populate_from="complaints",
                        unique=True,
                        verbose_name="Путь",
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        default=None,
                        null=True,
                        upload_to="users/%Y/%m/%d",
                        verbose_name="Добавить фото",
                    ),
                ),
                ("time_create", models.DateTimeField(auto_now_add=True, null=True)),
                ("time_update", models.DateTimeField(auto_now=True, null=True)),
                (
                    "is_published",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Черновик"), (1, "Опубликовать")],
                        default=0,
                        null=True,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "profile_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="form_person_complaints",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
            ],
            options={
                "ordering": ["-time_create"],
                "indexes": [
                    models.Index(
                        fields=["-time_create"], name="users_formp_time_cr_57ac2e_idx"
                    )
                ],
            },
        ),
    ]
